Full Stack Trivia API Backend
This project is a virtual trivia game in the Full Stack Developer course by Udacity.
You can add questions giving a diffiulty level and a category, delete a question, 
and play trivia.


Getting Started
Installing Dependencies
Python 3.7.5
Follow instructions to install the latest version of python for your platform in the python docs 

PIP Dependencies
Install dependencies by navigating to the /backend directory and running:

pip install -r requirements.txt
This will install all of the required packages we selected within the requirements.txt file.

Dependencies
Flask is required to handle requests and responses.

SQLAlchemy is the Python SQL toolkit and ORM used to handle the lightweight sqlite database. 

Flask-CORS is the extension we'll use to handle cross origin requests from our frontend server.

Database Setup
With Postgres running, restore a database using the trivia.psql file provided. From the backend folder in terminal run:
createdb trivia
psql trivia < trivia.psql

The server
To run the server, execute:

export FLASK_APP=flaskr
export FLASK_ENV=development
flask run
Setting the FLASK_ENV variable to development will detect file changes and restart the server automatically.

Setting the FLASK_APP variable to flaskr directs flask to use the flaskr directory and the __init__.py file to find the application.

Tasks

Use Flask-CORS to enable cross-domain requests and set response headers.
Create an endpoint to handle GET requests for questions, including pagination (every 10 questions). This endpoint should return a list of questions, number of total questions, current category, categories.
Create an endpoint to handle GET requests for all available categories.
Create an endpoint to DELETE question using a question ID.
Create an endpoint to POST a new question, which will require the question and answer text, category, and difficulty score.
Create a POST endpoint to get questions based on category.
Create a POST endpoint to get questions based on a search term. It should return any questions for whom the search term is a substring of the question.
Create a POST endpoint to get questions to play the quiz. This endpoint should take category and previous question parameters and return a random questions within the given category, if provided, and that is not one of the previous questions.
Create error handlers for all expected errors including 400, 404, 422 and 405.

Endpoints
GET '/categories'
GET '/questions'
DELETE '/questions/<int:question_id>'
POST '/questions'
GET '/categories/<int:category_id>/questions'
POST '/quizzes'

GET '/categories'
- Fetches a dictionary of categories in which the keys are the ids and the value is the corresponding string of the category
- Request Arguments: None
- Returns: An object with a single key, categories, that contains a object of id: category_string key:value pairs. 
{'1' : "Science",
'2' : "Art",
'3' : "Geography",
'4' : "History",
'5' : "Entertainment",
'6' : "Sports"}

GET '/questions'
- Fetches a list of all questions, including pagination (every 10 questions)
- Request Arguments: page # (default 1)
- Returns: An object containing a list of question objects for the current page, total number of questions, an empty category, and an object with a single key, categories, that contains a object of id: category_string key:value pairs.
{
    'questions': [{
        'id': self.id,
        'answer': self.answer,
        'category': self.category,
        'difficulty': self.difficulty
    }],
    'total_questions': len(questions),
    'category': "",
    'categories': {
        '1' : "Science",
        '2' : "Art",
        '3' : "Geography",
        '4' : "History",
        '5' : "Entertainment",
        '6' : "Sports"
    }
}

DELETE '/questions/<int:question_id>'
- This will delete the question matching the specified question_id from the database then return the updated list of questions.
- Request Arguments: question_id as an integer
- Returns: An object containing a list of question objects for the current page, total number of questions, an empty category, and an object with a single key, categories, that contains a object of id: category_string key:value pairs.
{
    'questions': [{
        'id': self.id,
        'answer': self.answer,
        'category': self.category,
        'difficulty': self.difficulty
    }],
    'total_questions': len(questions),
    'category': "",
    'categories': {
        '1' : "Science",
        '2' : "Art",
        '3' : "Geography",
        '4' : "History",
        '5' : "Entertainment",
        '6' : "Sports"
    }
}

POST '/questions'
- This will take fields for adding a new question to the database or a search term.  If a search term is provided, then it will return a list of questions for whom the search term is a substring of the question (case insensitive).  Otherwise, it will add a new question to the database and return the updated list of questions.
- Request Arguments: {
    'question': string,
    'answer': string,
    'difficulty': int (value 1-5),
    'category': int (value 1-6),
    'searchTerm': string
}
- Returns: An object containing a list of question objects for the current page, total number of questions, an empty category, and an object with a single key, categories, that contains a object of id: category_string key:value pairs.
{
    'questions': [{
        'id': self.id,
        'answer': self.answer,
        'category': self.category,
        'difficulty': self.difficulty
    }],
    'total_questions': len(questions),
    'category': "",
    'categories': {
        '1' : "Science",
        '2' : "Art",
        '3' : "Geography",
        '4' : "History",
        '5' : "Entertainment",
        '6' : "Sports"
    }
}

GET '/categories/<int:category_id>/questions'
- Fetches a list of questions, including pagination (every 10 questions), that belong to the selected category.
- Request Arguments: category_id as integer
- Returns: An object containing a list of question objects for the current page, total number of questions for the selected category, the selected category, and an object with a single key, categories, that contains a object of id: category_string key:value pairs.
{
    'questions': [{
        'id': self.id,
        'answer': self.answer,
        'category': self.category,
        'difficulty': self.difficulty
    }],
    'total_questions': len(questions),
    'category': category_id,
    'categories': {
        '1' : "Science",
        '2' : "Art",
        '3' : "Geography",
        '4' : "History",
        '5' : "Entertainment",
        '6' : "Sports"
    }
}

POST '/quizzes'
- Fetches a question from the selected category (or from the entire list if all categories were selected), that has not been previously displayed for the current quiz, then randomly selects a question from that list.
- Request Arguments: An object containing a list of previous questions used and a category id to select questions from.
{
    'previous_questions': [],
    'quiz_category': int
}
- Returns: An object containing a question object.
{
    'question': {
        'id': self.id,
        'answer': self.answer,
        'category': self.category,
        'difficulty': self.difficulty
    }
}


## Testing
To run the tests, run
dropdb trivia_test createdb trivia_test psql trivia_test < trivia.psql python test_flaskr.py